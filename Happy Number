//https://leetcode.com/problems/happy-number/
class Solution {
    public boolean isHappy(int n) {
        HashSet<Integer> map = new HashSet<>();
        int sum = s_sum(n);
        while(sum==1 || !map.contains(sum)){
            if(sum==1) return true;
            if(map.contains(sum)) return false;
            else{
                map.add(sum);
                sum = s_sum(sum);
            }
        }
        return false;
    }
    public int s_sum(int n) {
        int sum=0;
        while(n>0){
            sum+= (int)Math.pow(n%10,2);
            n/=10;
        }
        return sum;
    }
    
}

// leetcode sol:
class Solution {

    private int getNext(int n) {
        int totalSum = 0;
        while (n > 0) {
            int d = n % 10;
            n = n / 10;
            totalSum += d * d;
        }
        return totalSum;
    }

    public boolean isHappy(int n) {
        Set<Integer> seen = new HashSet<>();
        while (n != 1 && !seen.contains(n)) {
            seen.add(n);
            n = getNext(n);
        }
        return n == 1;
    }
}
